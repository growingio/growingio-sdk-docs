<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://growingio.github.io/growingio-sdk-docs/growingio-sdk-docs/blog</id>
    <title>一站式数据增长引擎 Blog</title>
    <updated>2021-07-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://growingio.github.io/growingio-sdk-docs/growingio-sdk-docs/blog"/>
    <subtitle>一站式数据增长引擎 Blog</subtitle>
    <icon>https://growingio.github.io/growingio-sdk-docs/growingio-sdk-docs/img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[MavenCentral 迁移步骤]]></title>
        <id>MavenCentral</id>
        <link href="https://growingio.github.io/growingio-sdk-docs/growingio-sdk-docs/blog/MavenCentral"/>
        <updated>2021-07-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[随着 Jcenter 服务的即将过期，我们需要一个新的仓库来发行我们的SDK.于是我们找上了 MavenCentral，并针对如何在MavenCentral提交包写了这篇文章。]]></summary>
        <content type="html"><![CDATA[<p>随着 Jcenter 服务的即将过期，我们需要一个新的仓库来发行我们的SDK.于是我们找上了 MavenCentral，并针对如何在MavenCentral提交包写了这篇文章。</p><h2>注册账号</h2><p>前往 <a href="https://issues.sonatype.org/">sonatype</a> 注册账号，账号注册完毕后需要提个issue来申请 groupid .</p><p>如 <a href="https://issues.sonatype.org/browse/OSSRH-66388">OSSRH-66388</a> 所示，如果是GitHub或gitlab下的项目，可以申请 <code>io.github.&lt;yourname&gt;</code>。
如果是域名，则需要在域名的dns解析下添加 TXT 记录，如 <a href="https://issues.sonatype.org/browse/OSSRH-66397">OSSRH-66397</a>举例，txt前缀为OSSRH-66397 值为网址<a href="https://issues.sonatype.org/browse/OSSRH-66397">https://issues.sonatype.org/browse/OSSRH-66397</a>.</p><blockquote><p>在2021年2月前申请的账号，maven仓库的地址为 <a href="https://oss.sonatype.org/">https://oss.sonatype.org/</a>，而在之后申请的的地址为 <a href="https://s01.oss.sonatype.org/">https://s01.oss.sonatype.org/</a>.不过也可以在<a href="https://issues.sonatype.org/">sonatype</a>上提 issue 来申请变更域名地址，如这个issue所示-&gt;<a href="https://issues.sonatype.org/browse/OSSRH-66964">OSSRH-66964</a></p></blockquote><h2>Maven Central</h2><p>注册结束后，可以前往<a href="https://s01.oss.sonatype.org/">nexus repository</a>查看自己的仓库。在仓库中一般分为两种提交方式，一种是 SNAPSHOT 版本，一种是正式版本。
两者仓库地址不同，分别为：<a href="https://s01.oss.sonatype.org/content/repositories/snapshots">https://s01.oss.sonatype.org/content/repositories/snapshots</a> 和 <a href="https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/">https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</a></p><h3>SNAPSHOT</h3><p>SNAPSHOT 版本可以在同一版本号下多次提交，当其他人拉取该版本号时会取最后提交的包，如下图所示
<img src="/img/SNAPSHOT.png" alt="SNAPSHOT"/>
在 SNAPSHOT 仓库中同一个版本下多个包会通过提交日期来区分，这样别人依赖某个版本时就能获得最新更新的包。
同时 SNAPSHOT 不会对提交的包进行 <code>close</code> 操作来对其进行审核，没有一定要有 <code>javadoc</code>、<code>sources</code>、<code>GPG加密</code>等要求。</p><h3>正式版</h3><p>提交正式版后包会先进入 <code>Staging Repositories</code>,然后需要在这里依次执行 <code>close</code> 和 <code>release</code> 操作，<code>close</code>操作会验证本次的提交的包是否包含 <code>javadoc</code>、<code>sources</code>、<code>GPG加密文件</code> 和 <code>pom</code>文件的合法等，通过后才能执行 <code>release</code> 操作向官方仓库发布。</p><p><img src="/img/Repositories.png" alt="Staging Repositories"/></p><h2>开始准备</h2><h3>1. 配置 GPG 私钥</h3><pre><code class="language-cmd"># 生成证书，里面会要求输入用户名和密码，有效期两年。
gpg --gen-key

# 查看公钥
gpg --list-keys

# 查看私钥
gpg --list-secret-keys

# 将证书上传 key server，恩，国内需要代理
gpg --keyserver-options http-proxy=127.0.0.1:1087 --send-keys D81E8990E415EDE0

# 查看8位短id
gpg --list-keys --keyid-format short

# 生成私钥文件，配置到gradle使用
gpg --export-secret-keys -o secring.gpg

# 生成base64文件，后续放入github secrets 中使用
base64 secring.gpg &gt; secring.gpg.b64
</code></pre><p>具体可参考 <a href="https://central.sonatype.org/publish/requirements/gpg/">gpg配置</a></p><h3>2. 本地全局 gradle 配置</h3><p>找到 <code>.gradle</code>文件夹下gradle.properties文件，如下进行配置</p><pre><code class="language-gradle">## growingio&#x27;s config
NEXUS_USERNAME=&lt;sonatype账号&gt;
NEXUS_PASSWORD=&lt;sonatype密码&gt;

signing.keyId=09B66CAF
signing.password=&lt;生成证书时的输入密码&gt;
signing.secretKeyRingFile=&lt;生成私钥文件的文件路径&gt;
</code></pre><p>当然在项目下的gradle.properties也同样生效。</p><h3>3. 配置 pom 文件</h3><p>在根项目下的 gradle.properties 添加以下配置说明，这些说明将会一一填入到 pom 文件中</p><pre><code class="language-xml">GROUP=com.growingio.android
POM_DESCRIPTION=GrowingIO Android SDK Library.
POM_DEVELOPER_EMAIL=sdk-integration@growingio.com
POM_URL=https://github.com/growingio/growingio-sdk-android-autotracker
POM_SCM_URL=https://github.com/growingio/growingio-sdk-android-autotracker
POM_SCM_CONNECTION=scm:git@github.com:growingio/growingio-sdk-android-autotracker.git
POM_SCM_DEV_CONNECTION=scm:git@github.com:growingio/growingio-sdk-android-autotracker.git
POM_LICENCE_NAME=The Apache Software License, Version 2.0
POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
POM_LICENCE_DIST=repo
POM_DEVELOPER_ID=GrowingIo Sdk
POM_DEVELOPER_NAME=GrowingIo Sdk
</code></pre><h3>4. 编写gradle的maven上传代码</h3><p><a href="https://central.sonatype.org/publish/publish-gradle/">sonatype 的gradle教程</a> 已经过期好久了，这里推荐在 Github 上的<a href="https://github.com/chrisbanes/gradle-mvn-push">gradle-mvn-push</a>。后面的所有改动都基于在这个文件版本上得来的，具体如何改动在后续说明。
示例代码 <code>publishMaven.gradle</code>：</p><pre><code class="language-groovy">/*
 * Copyright 2021 Cpacm
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * Based on: https://github.com/mcxiaoke/gradle-mvn-push/blob/master/gradle-mvn-push.gradle.
 *
 * To install in a local maven repo:
 * 1. In the project you want to test, add mavenLocal() to the repositories list.
 * 2. In Project, run: ./gradlew publishToMavenLocal
 *
 * For faster runs add: -x check when building.
 */

apply plugin: &#x27;maven-publish&#x27;
apply plugin: &#x27;signing&#x27;

version = releaseConfiguration.releaseVersion
group = GROUP

@SuppressWarnings(&quot;GrMethodMayBeStatic&quot;)
def isReleaseBuild() {
    return !version.contains(&quot;SNAPSHOT&quot;)
}

def getReleaseRepositoryUrl() {
    return hasProperty(&#x27;RELEASE_REPOSITORY_URL&#x27;) ? RELEASE_REPOSITORY_URL
            : &#x27;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&#x27;
}

def getSnapshotRepositoryUrl() {
    return hasProperty(&#x27;SNAPSHOT_REPOSITORY_URL&#x27;) ? SNAPSHOT_REPOSITORY_URL
            : &#x27;https://s01.oss.sonatype.org/content/repositories/snapshots/&#x27;
}

def getRepositoryUsername() {
    return hasProperty(&#x27;USERNAME&#x27;) ? USERNAME : (hasProperty(&#x27;NEXUS_USERNAME&#x27;) ? NEXUS_USERNAME : &#x27;&#x27;)
}

def getRepositoryPassword() {
    return hasProperty(&#x27;PASSWORD&#x27;) ? PASSWORD : (hasProperty(&#x27;NEXUS_PASSWORD&#x27;) ? NEXUS_PASSWORD : &#x27;&#x27;)
}

def configurePom(pom) {
    pom.name = POM_NAME
    pom.packaging = POM_PACKAGING
    pom.description = POM_DESCRIPTION
    pom.url = POM_URL

    pom.scm {
        url = POM_SCM_URL
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
    }

    pom.licenses {
        license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
            distribution = POM_LICENCE_DIST
        }
    }

    pom.developers {
        developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
            email = POM_DEVELOPER_EMAIL
        }
    }
}

afterEvaluate { project -&gt;
    def isAndroidProject = project.plugins.hasPlugin(&#x27;com.android.application&#x27;) || project.plugins.hasPlugin(&#x27;com.android.library&#x27;)
    publishing {
        repositories {
            maven {
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                credentials(PasswordCredentials) {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    if (isAndroidProject) {
        task androidJavadocs(type: Javadoc, dependsOn: assembleDebug) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            // include BuildConfig.java
            classpath += project.files(project.file(&quot;build/generated/source/buildConfig/debug&quot;))
            excludes = [&#x27;**/*.kt&#x27;]
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = &#x27;javadoc&#x27;
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = &#x27;sources&#x27;
            from android.sourceSets.main.java.source
        }

        android.libraryVariants.all { variant -&gt;
            tasks.androidJavadocs.doFirst {
                classpath += files(variant.javaCompileProvider.get().classpath.files.join(File.pathSeparator))
            }
        }
    } else {

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = &#x27;sources&#x27;
            from sourceSets.main.allSource
        }

        task javadocsJar(type: Jar, dependsOn: javadoc) {
            classifier = &#x27;javadoc&#x27;
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocsJar
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption(&#x27;Xdoclint:none&#x27;, &#x27;-quiet&#x27;)
            }
        }
    }

    if (JavaVersion.current().isJava9Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addBooleanOption(&#x27;html5&#x27;, true)
            }
        }
    }

    artifacts {
        if (isAndroidProject) {
            archives androidSourcesJar
            archives androidJavadocsJar

            archives project.tasks.bundleDebugAar
        }
    }

    publishing {
        publications {
            mavenAgent(MavenPublication) {
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version version
                configurePom(pom)

                if (isAndroidProject) {
                    artifact bundleReleaseAar
                    artifact androidSourcesJar

                    pom.withXml {
                        def dependenciesNode = asNode().appendNode(&#x27;dependencies&#x27;)
                        project.configurations.all { configuration -&gt;
                            def name = configuration.name
                            // api will duplicate with implementation
                            if (name == &#x27;releaseImplementation&#x27; || name == &#x27;implementation&#x27;) {
                                configuration.allDependencies.each {
                                    if (it.name != &quot;unspecified&quot; &amp;&amp; it.version != &quot;unspecified&quot;) {
                                        def groupId = it.group
                                        def artifactId = it.name
                                        if (it instanceof ProjectDependency) {
                                            def properties = it.getDependencyProject().getProperties()
                                            groupId = properties.get(&quot;GROUP&quot;)
                                            artifactId = properties.get(&quot;POM_ARTIFACT_ID&quot;)
                                        }
                                        println &quot;dependencies:&quot; + groupId + &quot;:&quot; + artifactId + &quot;:&quot; + it.version
                                        def dependencyNode = dependenciesNode.appendNode(&#x27;dependency&#x27;)
                                        dependencyNode.appendNode(&#x27;groupId&#x27;, groupId)
                                        dependencyNode.appendNode(&#x27;artifactId&#x27;, artifactId)
                                        dependencyNode.appendNode(&#x27;version&#x27;, it.version)
                                        dependencyNode.appendNode(&#x27;scope&#x27;, &#x27;compile&#x27;)
                                    }
                                }
                            }
                        }
                    }
                } else {
                    from components.java
                    artifact sourcesJar
                    artifact javadocsJar
                }
            }

            if (project.plugins.hasPlugin(&#x27;java-gradle-plugin&#x27;)) {
                pluginMaven(MavenPublication) {
                    groupId GROUP
                    artifactId POM_ARTIFACT_ID
                    version version
                    configurePom(pom)
                }
            }
        }
    }
}

signing {
    required { isReleaseBuild() &amp;&amp; gradle.taskGraph.hasTask(&quot;publish&quot;) }
    publishing.publications.all { publication -&gt;
        sign publication
    }
}

</code></pre><p>基本使用：在需要发布的项目下添加 <code>gradle.properties</code>文件，并注明 <code>ARTIFACT_ID</code>名，如下：</p><pre><code class="language-xml">POM_NAME=autotracker
POM_ARTIFACT_ID=autotracker
POM_PACKAGING=aar
POM_DESCRIPTION=GrowingIO Android SDK AutoTracker.
</code></pre><p>同时在 <code>build.gradle</code> 中引入该文件</p><pre><code class="language-gradle">apply from: &quot;${rootProject.projectDir}/gradle/publishMaven.gradle&quot;
</code></pre><pre><code class="language-cmd"># 上传到本地仓库
./gradlew publishToMavenLocal

# 上传到远程仓库
./gradlew publish

</code></pre><h3>5. Github Ci脚本</h3><p>GitHub上有提供 Action 这一工具，该工具可以在线上进行各种操作：比如编译，测试，校验等，所以打包上传也是可以的。</p><ol><li><p>配置 Github Secrets
<img src="/img/Secrets.png" alt="Github Secrets"/>
各个配置分别对应 <code>全局 gradle 配置</code> 步骤中的各个参数，其中 <code>SIGNING_SECRET_KEY_RING_FILE</code> 是秘钥文件经过 base64 后产生的字符串。</p></li><li><p>自动 close 和 release
这里直接使用 <a href="https://github.com/Codearte/gradle-nexus-staging-plugin">gradle-nexus-staging-plugin</a>的插件。它能通过 sonatype 的api来自动实现 <code>Staging Repositories</code>上的close和release操作</p></li><li><p>完整ci脚本</p></li></ol><pre><code class="language-yml">name: Publish Maven
on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Gradle 缓存配置
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles(&#x27;**/*.gradle&#x27;) }}
          restore-keys: ${{ runner.os }}-gradle

      # 给 gradlew 文件授权
      - name: Grant Permission to Execute
        run: |
          chmod +x gradlew
          chmod +x gradle/publishAllToMavenLocal.sh

      # 构建项目
      - name: Build with Gradle
        run: |
          bash ./gradle/publishAllToMavenLocal.sh

      # 解码秘钥
      - name: Decode
        run: |
          echo &quot;${{secrets.SIGNING_SECRET_KEY_RING_FILE}}&quot; &gt; ~/.gradle/secring.gpg.b64
          base64 -d ~/.gradle/secring.gpg.b64 &gt; ~/.gradle/secring.gpg

      - name: Publish to Sonatype
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew publish -PNEXUS_USERNAME=&quot;${NEXUS_USERNAME}&quot; -PNEXUS_PASSWORD=&quot;${NEXUS_PASSWORD}&quot; -Psigning.keyId=${{secrets.SIGNING_KEY_ID}} -Psigning.password=${{secrets.SIGNING_PASSWORD}} -Psigning.secretKeyRingFile=$(echo ~/.gradle/secring.gpg)

      - name: Close And Release Package
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew tryCloseAndReleaseRepository -PNEXUS_USERNAME=&quot;${NEXUS_USERNAME}&quot; -PNEXUS_PASSWORD=&quot;${NEXUS_PASSWORD}&quot;

</code></pre><p>至此，一套完整的自动打包系统就搭建完成了。</p><hr/><p>参考资料：</p><ol><li><a href="https://docs.github.com/cn/actions/reference/events-that-trigger-workflows">github action</a></li><li><a href="https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials">gradle 配置</a></li></ol><h2>附录：关于在 GrowingIO 各个仓库上遇到的几个问题</h2><h3>gradle plugin 插件打包</h3><p>plugin项目应该属于 java 项目，但在 <code>publications</code>下它会单独走 <code>pluginMaven</code>，所以需要对其做特别处理来规范其 ARTIFACT_ID</p><pre><code class="language-groovy">if (project.plugins.hasPlugin(&#x27;java-gradle-plugin&#x27;)) {
    pluginMaven(MavenPublication) {
        groupId GROUP
        artifactId POM_ARTIFACT_ID
        version version
        configurePom(pom)
    }
}

</code></pre><h3>javadoc找不到BuildConfig文件</h3><p>这里需要在生成 javadoc 包的时候添加 BuildConfig类的路径到 classpath 中。</p><pre><code class="language-groovy">task androidJavadocs(type: Javadoc, dependsOn: assembleDebug) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // include BuildConfig.java
    classpath += project.files(project.file(&quot;build/generated/source/buildConfig/debug&quot;))
    excludes = [&#x27;**/*.kt&#x27;]
}
</code></pre><p>当然可能不同版本的gradle生成的地址不一样，请自己测试并添加</p><h3>关于 uploadArchives</h3><p>旧版本 Gradle 的task，依赖于插件 maven。现在一般都是</p><pre><code class="language-groovy">apply plugin: &#x27;maven-publish&#x27;

afterEvaluate { project -&gt;
    publishing {}
}
</code></pre><p>且在 gradle 版本 5.0后，需要将 publishing 放置在 afterEvaluate 中。</p><h3>关于依赖</h3><p>api依赖和implementation依赖会重复出现在 <code>project.configurations.all</code>循环中(api &gt; implementation)，所以只需要判断 <code>implementation</code>即可</p><pre><code class="language-groovy">pom.withXml {
    def dependenciesNode = asNode().appendNode(&#x27;dependencies&#x27;)
    project.configurations.all { configuration -&gt;
        def name = configuration.name
        // api will duplicate with implementation
        if (name == &#x27;releaseImplementation&#x27; || name == &#x27;implementation&#x27;) {
            configuration.allDependencies.each {
                if (it.name != &quot;unspecified&quot; &amp;&amp; it.version != &quot;unspecified&quot;) {
                    def groupId = it.group
                    def artifactId = it.name
                    if (it instanceof ProjectDependency) {
                        def properties = it.getDependencyProject().getProperties()
                        groupId = properties.get(&quot;GROUP&quot;)
                        artifactId = properties.get(&quot;POM_ARTIFACT_ID&quot;)
                    }
                    println &quot;dependencies:&quot; + groupId + &quot;:&quot; + artifactId + &quot;:&quot; + it.version
                    def dependencyNode = dependenciesNode.appendNode(&#x27;dependency&#x27;)
                    dependencyNode.appendNode(&#x27;groupId&#x27;, groupId)
                    dependencyNode.appendNode(&#x27;artifactId&#x27;, artifactId)
                    dependencyNode.appendNode(&#x27;version&#x27;, it.version)
                    dependencyNode.appendNode(&#x27;scope&#x27;, &#x27;compile&#x27;)
                }
            }
        }
    }
}
</code></pre>]]></content>
        <author>
            <name>cpacm</name>
            <uri>https://github.com/cpacm</uri>
        </author>
    </entry>
</feed>